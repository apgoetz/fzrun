#!/usr/bin/env bash
# PROGRAM: fzrun
# AUTHOR: Andy Goetz


# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# OVERVIEW: This script uses fuzzy logic to detect runaway
# processes. It uses the bc program to "implement" floating point math
# in vanilla bash. For more information, see the help
# 
# to see an example use of this program, look at net_runaway.sh


# parameters and arguments are the only global variables:



VERBOSE=""
FORCE=""
PERPROCESS=""
# the pid of the process to try to parse if specified
SINGLEPROCESS="" 
SUPPRESS=""
# print the help for this program
function print_help {
    cat <<EOF   
Usage: fzrun [-vqpfh] [PID]
Uses fuzzy logic techniques to determine if a machine has runaway
processes on it, and tries to identify which processes are runaways.

By default, looks at entire state of machine. If PID is provided, only
that single process is checked to see if it is a runaway.

Options:
  -h	Print this help
  -v	Turn on verbose output
  -q	Suppress all output. Takes priority over verbose.
  -p	Try to detect individual runaway process, if fzrun thinks they exist
  -f	Force fzrun to detect individual runaways, even if it doesn't think
    	there are any

By default, fzrun looks at the load average, memory usage, and I/O wait
time to determine if the machine is currently experiencing
runaways. fzrun will examine individual processes in more detail,
however, this operation is much slower.

Report bugs to: andy@andygoetz.org
fzrun home page: <http://github.com/apgoetz/fzrun>
EOF
}

#helper function to prettify bc callouts
function _bc {
    echo "scale=5; $@" | bc
}

# executes a floating point conditional using bc
function cond {
    local _cond=0
    if [[ $# -gt 0 ]] ; then
	_cond=$(echo "$*" | bc -q 2> /dev/null)
	if [[ -z "$_cond" ]]; then _cond=0;fi
	if [[ "$_cond" != 0 && "$_cond" != 1 ]]; then _cond=0; fi
    fi

    local stat=$(($_cond == 0))
    return $stat
}

# Fuzzy AND operator
function and {
    local result=1
    for val in $@ ; do
	result=$(_bc "if($result < $val) {$result} else {$val}")
    done 
    echo $result
}
# Fuzzy OR
function or {
    local result=0
    for val in $@ ; do
	result=$(_bc "if($result > $val) {$result} else {$val}")
    done
    echo $result
}

# Fuzzy NOT
function not {
    _bc "1 - $1"
}

# scales a fuzzy variable using a triangular fitness function.
#
# takes 3 parameters: width, center, value
function fuzzy {
    local width=$1
    local center=$2
    local value=$3


    _bc "if($value < $center - $width || $value > $center + $width) { 0 } " \
    "else if ($value < $center) {$value / $width - ($center - $width) / $width} " \
	"else {-$value / $width + 1 + $center/$width}"
}

# uses free to get the total amount of memory used in the
# system. Value is scaled to 0-1
function get_mem_usage {
        local total=$(free -t | tail -1 | awk '{ print $2 }')
	local used=$(free -t | tail -1 | awk '{ print $3 }')
	
	MEM_USAGE=$(_bc "$used / $total")
	echo $MEM_USAGE

}

# Another dimension checked during the cursory runaway check is the
# percentage of cpu time spend waiting for IO.
function get_io_usage {
    
    OS=$(uname)
    # Depending on the OS, we use different commands to get the time
    # spent waiting on IO
    if [[ $OS == 'SunOS' ]] ; then
	IO_WAIT=$(mpspstat -a | tail -1 | awk '{print $15}')
    elif [[ $OS == 'Linux' ]] ; then
	IO_WAIT=$(mpstat 1 1 | tail -1 | awk '{print $6}')
    else
	IO_WAIT=0
    fi
    # turn the percent into a decimal value
    _bc "$IO_WAIT / 100"
}

# determine the number of CPU cores on the current box. Depending on
# the specific 'nix we are running, we determine this information differently.
function num_cpus {

    # We memoize the number of cpus to prevent the script from forking
    # multiple subprocesses every time it wants to use the number of
    # cpus
    if [[ -n "$NUM_CPUS" ]] ; then
	echo $NUM_CPUS
	return
    fi 
    
    OS=$(uname)
    # Depending on the OS, we use different commands to get the cpu info
    if [[ $OS == 'SunOS' ]] ; then
	NUM_CPUS=$(kstat cpu_info | grep core_id | sort -u | wc -l)
	echo $NUM_CPUS
	return
    elif [[ $OS == 'Linux' ]] ; then
	NUM_CPUS=$(grep processor /proc/cpuinfo | wc -l)
	echo $NUM_CPUS
	return
    fi
}

#calculates fuzzy cpu load. 
function get_cpu_load {

    # get the 1, 5, and 15 minute load average
    local LOAD=$(uptime | sed 's/.*average://')
    local LOAD1=$(echo $LOAD | awk '-F,' '{print $1}')
    local LOAD5=$(echo $LOAD | awk '-F,' '{print $2}')
    local LOAD15=$(echo $LOAD | awk '-F,' '{print $3}')

    # the weights for each load factor.  We only want to trigger if
    # the system has had a high load for a while, but we don't want to
    # spend too much time waiting for that high load
    local WEIGHT1=1
    local WEIGHT5=4
    local WEIGHT15=2
    local SUMWEIGHTS=$(_bc "$WEIGHT1 + $WEIGHT5 + $WEIGHT15")
    
    # take the weighted average of the 1, 5 and 15 minute
    # averages. return this as the fuzzy cpu load
    CPU_LOAD=$(_bc "($LOAD1 * $WEIGHT1 + $LOAD5 * $WEIGHT5 + $LOAD15 * $WEIGHT15) / $SUMWEIGHTS / $(num_cpus)")
    echo $CPU_LOAD
}

# decide whether or not to execute the runaway check.
#
# Uses cpu usage, memory usage, and IO wait time to determine whether
# or not to run a more detailed scan for runaways
#
# Returns 0 if a
# runaway ought to be run. Returns 1 if there is no need for a runaway
# check.

function look_for_runaways {  

    local IO_USAGE=$(get_io_usage)	# so slow, we  save its value

    local retval=1
    local mesg=ok
    local MAX_LOAD="0.7"
    local MAX_MEM="0.8"
    local MAX_IO=$(_bc "1 / $(num_cpus)")

    # check if load is too high
    if cond "$(get_cpu_load) > $MAX_LOAD" ; then
	mesg="bad"
	retval=0
    fi

    # check if too much memory is being used
    if cond "$(get_mem_usage) > $MAX_MEM" ; then
	mesg="bad"
	retval=0
    fi

    # check if machine spends too much time waiting on IO
    if cond "$IO_USAGE > $MAX_IO" ; then
	mesg="bad"
	retval=0
    fi
    debug  -e "$HOSTNAME\t$(get_cpu_load)\t$(get_mem_usage)\t$IO_USAGE\t$mesg"
    return $retval
}

# print text if debug is enabled
function debug {
    	if [[ -n "$VERBOSE" && -z "$SUPPRESS" ]] ; then
	    echo $@
	fi
}

# print text only if SUPPRESS not specified
function suppress {
    if [[ -z "$SUPPRESS" ]] ; then
	echo $@
    fi
}


# determine if a specific process is a runaway process
function is_runaway {

    # the process id we are currently parsing
    local pid=$1
    local ps=$(ps hu $p)
    # in order to avoid race conditions on parsing process info, grab
    # a snapshot of each process's info at one time
    local psdata=$(ps ho nice,ppid,pcpu,pmem $pid)

    # the process probably already died. ignore it    
    if [[ -z $psdata ]] ; then
	return 255
    fi


    # use awk to extract the individual fields of the ps info for the process
    # the nice level
    local nice=$(echo $psdata | awk '{ print $1}')

    # parent process id
    local ppid=$(echo $psdata | awk '{ print $2 }')

    # percent cpu usage
    local pcpu=$(echo $psdata | awk '{print $3 }')
    # percent memory usage
    local pmem=$(echo $psdata | awk '{print $4 }')

    # determine the "niceness" of the process
    if [ $nice == '-' ] ; then
	nice="0.0"
    else
	nice=$(_bc "$nice / 20")
    fi

    # determine if the process has been disowned by its parent
    local disowned=''
    if [[ $ppid == 1 ]] ; then
	disowned=1
    else
	disowned=0
    fi

    # percent cpu usage
    local cpu=$(_bc "$pcpu / 100")
    if cond "$cpu > 1" ; then
	cpu=1
    fi

    # in order to use fuzzy logic, we need to convert the raw cpu and
    # memory values into "fuzzy" values.
    local locpu=$(fuzzy ".2" "0" $cpu)
    local midcpu=$(fuzzy ".15" ".3" $cpu)
    local hicpu=$(fuzzy ".7" "1" $cpu)

    local mem=$(_bc "$pmem / 100")

    local lomem=$(fuzzy ".01" "0" $mem)
    local midmem=$(fuzzy ".15" ".15" $mem)
    local himem=$(fuzzy ".85" "1" $mem)



    
#    fuzzy rules for detecting runaways. Basically, if there is no
#    attached tty, or the process is inherited by init, it is forced
#    to use the 'medium' cpu and memory thresholds. If there is an
#    attached tty, or a parent process, the higher thresholds are used
#    to decided if the process is a runaway
    local BADNESS=$(or \
	$(and $(not $nice) $midcpu) \
    	$(and $(not $nice) $midmem) \
    	$(and $(not $nice) $hicpu) \
    	$(and $(not $nice) $himem) \
    	$(and $nice $hicpu) \
    	$(and $nice $himem) \
    	$(and $(not $disowned) $midcpu) \
    	$(and $(not $disowned) $midmem) \
    	$(and $(not $disowned) $hicpu) \
    	$(and $(not $disowned) $himem) \
    	$(and $disowned $hicpu) \
    	$(and $disowned $himem))

    
    local THRESHOLD="0.30"
    
    if cond "$BADNESS > $THRESHOLD" ; then
	debug -e "$HOSTNAME $BADNESS $ps"
	return 0
    else
	return 1
    fi
    
}


# find runaway processes on a system
function find_runaways {
    for p in $(ps axho pid); do	
	if is_runaway $p ; then	   	    
	    if [[ -z "$VERBOSE" ]] ; then		
		suppress $HOSTNAME $p
	    fi
	fi
    done
}

# check the arguments to this function
function process_args {
    for arg in $@; do
	# set the verbose flag
	if [[ -n $(echo $arg | grep -i v) ]] ; then
	    VERBOSE=1
	fi
	# set the supress flag
	if [[ -n $(echo $arg | grep -i q) ]] ; then
	    SUPPRESS=1
	fi
	# set the force flag
	if [[ -n $(echo $arg | grep -i f) ]] ; then
	    FORCE=1
	fi
	# set the per process flag
	if [[ -n $(echo $arg | grep -i p) ]] ; then
	    PERPROCESS=1
	fi
	# check if the help flag was specified
	if [[ -n $(echo $arg | grep -i h) ]] ; then
	    print_help
	    exit 0
	fi
	# determine if a pid was passed in. If so, we only check that
	# one pid
	if [[ -n $(echo $arg | egrep '^[0-9]+$') ]] ; then
	    SINGLEPROCESS=$arg
	fi
    done
}
# entry point for script
function main {

    #check script arguments
    process_args $@

    # If SINGLEPROCESS is set, that means the user only wants us to
    # check if a single process is a runaway. The return value of the
    # script determines if fzrun thinks the process was a runaway.
    if [[ -n "$SINGLEPROCESS" ]]; then 
	# check and see if the process is a runaway, but suppress it's
	# output
	VERBOSE='' is_runaway $SINGLEPROCESS 
	local result=$?
	if [[ $result -eq 0 ]] ; then
	    debug $SINGLEPROCESS may be a runaway
	else
	    debug $SINGLEPROCESS probably not a runaway
	fi
	exit $result
    fi
    # If SINGLEPROCESS was not set, we will check the state of the entire machine
    if look_for_runaways ; then
	if [[ -z "$VERBOSE" && -z "$PERPROCESS" && -z "$FORCE" ]] ; then
	    suppress $HOSTNAME
	fi
	if [[ -n "$PERPROCESS" ]] ; then
	    find_runaways
	fi
	# we found runaways. Exit with status 0
	exit 0
    elif [[ -n "$FORCE" ]] ; then
	find_runaways
    fi
    # we did not find runaways. return error code.
    exit 1
}


# call main program
main $@